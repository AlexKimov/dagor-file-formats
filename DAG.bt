//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint n, i, k, n0, io, childNumber, isObjStarted, sectionType;
local float Size, Sz, cnt;

uint getType()
{
  local uint type;
  FSkip(4);
  type = ReadInt(FTell());
  FSkip(-4);
  return type;
}

struct {
  UCHAR Magic[4]; // signature
  UINT DataSize;
  UCHAR DAG[4];
} HEADER <name="File Header">;

typedef struct {
  UINT DataSize;
  UINT Type;
  BYTE Length;
  UCHAR MaterialName[Length];
  struct {
    INT Unknown;
    INT Unknown;
    INT Unknown;
    FLOAT Unknown;
    INT Unknown;
    INT16 TextureIndex;
    INT16 Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    FLOAT Unknown;
    FLOAT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    BYTE Length;
    UCHAR LightMapName[Length];
  } PROPERTIES;
  UBYTE UNKNOWN_DATA[DataSize - (Length + PROPERTIES.Length + 74)];
} MATERIAL <name=GetMatName>;
 

typedef enum <uint> {
  END = 0,
  BEGIN = 1,
  HEADER = 2,
  DATA1 = 3,
  MESH_DATA = 4,
  DATA2 = 5,
  DATA3 = 6,
  DATA4 = 7,
  DATA5 = 8,
} OBJECT_SECTION_TYPE;

// tree from child objects
uint readObject_() {
  // 1
  INT DataSize;
  UINT Type;

  struct {
    // 2
    struct {
      INT DataSize;
      UINT Type; //
   
      INT16 Index <name="Object index">;
      INT16 ChildCount <name="Number of child objects">;
      INT16 Type;
      INT16 Unknown;

      if (DataSize > 12) {
        UCHAR ObjectName[DataSize - 12]; 
      };  
    } OBJECT_HEADER;

    //
    if (getType() != 7) {
        if (getType() == 3) 
            struct {
              INT DataSize;
              UINT Type;
              if (DataSize > 8) {
                UCHAR MeshName[DataSize - 4]; 
              };            
            } OBJECT_PROPERTIES;  

        struct {
          INT DataSize;
          UINT Type;
          BYTE Data[DataSize - 4];
        } DATA_5;      

        struct {
          INT DataSize;
          UINT Type;
          if (DataSize == 52)
              struct {
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
     
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT PosX;
                FLOAT PosY;
                FLOAT PosZ; 
              } MATRIX;   
        } MATRIX; 

        if (getType() == 8)      
          struct {
            INT DataSize;
            UINT Type;          
            BYTE Unknown_[DataSize - 4];
          } DATA_8;

        if (getType() == 1) {
          return 0;
        };

        if (getType() != 6)
        struct {
            INT DataSize;
            UINT Type;

            UINT Size;

            if (Size == 38) {
              UINT16 Count; 
              UINT16 UN;

              struct {
                FLOAT X;
                FLOAT X;
                FLOAT Z;
                FLOAT X;
                FLOAT Z;
              } D;

              BYTE Count;
              BYTE Count;
            
              struct {
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
              } UNK[Count];
              break;
            };
      
            UINT Unknkown; 

            UINT16 VertexCount;
            struct {
              FLOAT X;
              FLOAT Y;
              FLOAT Z;
            } VERTEX[VertexCount];

            UINT16 FaceCount;
            struct {
              UINT16 I1;
              UINT16 I3;
              UINT16 I2;
              UINT16 Unknown;
              UINT16 Unknown;
              UINT16 Unknown;
            } FACE_INDEXES[FaceCount]; 

            BYTE count;
            struct {
                UINT16 UVCount;
                BYTE CountAA;
                BYTE Unknown;

                struct {
                  FLOAT X[CountAA];
                } UV[UVCount];   

                struct {
                  UINT16 I1;
                  UINT16 I2;
                  UINT16 I2;
                } UV_INDEXES[FaceCount];                     
            } TEXTURE_DATA[count] <optimize=false>;
        } OBJECT_MESH_DATA;   

        struct {
          INT DataSize;
          UINT Type;
          BYTE Unknown_[DataSize - 4];
        } DATA_6;  

        if (getType() == 4) {
          struct {
            INT DataSize;
            UINT Type; 
            BYTE Data[DataSize - 4];
          } UNKNOWN;         
        };         
    } 

    // 7
    if (OBJECT_HEADER.ChildCount) {
      struct {
        INT DataSize;
        UINT Type; // 7
        for (i = 0; i < OBJECT_HEADER.ChildCount; ++i)
           readObject_();  
      } CHILD_OBJECTS;
    }

  } OBJECT_DATA;
  
  return 0;
};


// tree with infinite loop, failes while parsing bone structures
uint readObject(uint objCount) {
  struct { 
   while (true) { 
      INT DataSize;
      UINT Type;

      switch (Type) {
        case 8:
            struct {
              BYTE Unknown_[DataSize - 4];
            } DATA_8;
          break;

        case 7:
            isObjStarted = 0;
            readObject(childNumber);
            return 0; 
          break;

        case 6:
            struct {
              BYTE Unknown_[DataSize - 4];
            } DATA_6;
          break;  

        case 5:
            struct {
              BYTE Data[DataSize - 4];
            } DATA_5;
          break;

        case 4:
            struct {
                UINT Size;

                if (Size == 38) {
                  UINT16 Count; 
                  UINT16 UN;

                  struct {
                    FLOAT X;
                    FLOAT X;
                    FLOAT Z;
                    FLOAT X;
                    FLOAT Z;
                  } D;

                  BYTE Count;
                  BYTE Count;
                
                  struct {
                    FLOAT X;
                    FLOAT Y;
                    FLOAT Z;
                  } UNK[Count];
                  break;
                };
          
                UINT Unknkown; 
 
                UINT16 VertexCount;
                struct {
                  FLOAT X;
                  FLOAT Y;
                  FLOAT Z;
                } VERTEX[VertexCount];

                UINT16 FaceCount;
                struct {
                  UINT16 I1;
                  UINT16 I3;
                  UINT16 I2;
                  UINT16 Unknown;
                  UINT16 Unknown;
                  UINT16 Unknown;
                } FACE_INDEXES[FaceCount]; 

                BYTE count;
                struct {
                    UINT16 UVCount;
                    BYTE CountAA;
                    BYTE Unknown;

                    struct {
                      FLOAT X[CountAA];
                    } UV[UVCount];   

                    struct {
                      UINT16 I1;
                      UINT16 I2;
                      UINT16 I2;
                    } UV_INDEXES[FaceCount];                     
                } TEXTURE_DATA[count] <optimize=false>;

            } OBJECT_MESH_DATA;       
          break;
 
        case 3:
            struct {
              if (DataSize > 8) {
                UCHAR MeshName[DataSize - 4]; 
              };            
            } OBJECT_PROPERTIES;
          break;

        case 2:
            struct {
              INT16 Index <name="Object index">;
              INT16 Count <name="Number of child objects">;
              childNumber = Count;
              INT16 Type;
              sectionType = Type;
              INT16 Unknown;
              if (DataSize > 12) {
                UCHAR ObjectName[DataSize - 12]; 
              };
            } OBJECT_HEADER;
          break;

        case 1:
            if (DataSize == 52)
            {
              struct {
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
     
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT PosX;
                FLOAT PosY;
                FLOAT PosZ; 
              } MATRIX;   
            } else {
            } 
          break;
        case 0:
          return 0;  
      };
    };
  } GEOMETRY_OBJECTS;

  return 0;  
} 

while (!FEof())
{ 
  FSkip(4);
  n = ReadInt(FTell());
  if (n == 0) break;
  FSkip(-4);

  if (n == 4) 
    struct {
      UINT DataSize;
      UINT Type;
      UINT16 Count;
      typedef struct {
          BYTE Length;
          UCHAR Name[Length];
      } STATE_NAME <name=GetStateName>;
      typedef struct (uint arraysize) {
        STATE_NAME Array[arraysize] <optimize=false>;
      } STATE_NAMES;
      STATE_NAMES FileNames(Count) <name="State Names">;     

      UINT DataSize;
      UINT Type;
      struct {  
        UINT16 Index;
        UINT Pos;
      } A[Count];
    } STATE_LIST <name="States">;

  if (n == 3) 
    struct {
      UINT DataSize;
      UINT Type;
      UINT16 TextureCount;
      typedef struct {
          BYTE Length;
          UCHAR FileName[Length];
      } FILE_NAME <optimize=false, name=GetTexName>;
      typedef struct (uint arraysize) {
        FILE_NAME Array[arraysize];
      } FILE_NAME_ARRAY <optimize=false>;
      FILE_NAME_ARRAY FileNames(TextureCount) <name="Texture List">;     
    } TEXTURE <name="Textures">;

  if (n == 2) 
    MATERIAL Material;

  if (n == 1) {
    struct {
      readObject_();
    } GEOMETRY;
    break;
  };
    
}

Printf("%d", io);

//string GetObjName(OBJECT &obj)
//{
//  return "Object: " + obj.ObjectName;
//}

string GetStateName(STATE_NAME &st)
{
  return "State: " + st.Name;
}


string GetTexName(FILE_NAME &fn)
{
  return "Texture: " + fn.FileName;
}

string GetMatName(MATERIAL &mt)
{
  if (exists(mt.MaterialName))
    return "Material: " + mt.MaterialName;
  else
    return "Material";    
}