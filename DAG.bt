//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint n, k, n0, io, childNumber, isObjStarted, sectionType, pos;
local float Size, Sz, cnt;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
}  VECTOR_3F;

typedef struct {
  FLOAT X;
  FLOAT Y;
}  VECTOR_2F;

typedef struct {
  UINT16 X;
  UINT16 Y;
  UINT16 Z;
}  VECTOR_3UI;

uint getType()
{
  local uint type;
  FSkip(4);
  type = ReadInt(FTell());
  FSkip(-4);
  return type;
}

uint getSize()
{
  local uint size;
  size = ReadInt(FTell());
  return size;
}

struct {
  UCHAR Magic[4]; // signature
  UINT DataSize;
  UCHAR DAG[4];
} HEADER <name="File Header">;

typedef struct {
  UINT DataSize;
  UINT Type;
  BYTE Length;
  UCHAR MaterialName[Length];
  struct {
    INT Unknown;
    INT Unknown;
    INT Unknown;
    FLOAT Unknown;
    INT Unknown;
    INT16 TextureIndex;
    INT16 Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    FLOAT Unknown;
    FLOAT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    INT Unknown;
    BYTE Length;
    UCHAR LightMapName[Length];
  } PROPERTIES;
  UBYTE UNKNOWN_DATA[DataSize - (Length + PROPERTIES.Length + 74)];
} MATERIAL <name=GetMatName>;
 

typedef enum <uint> {
  END = 0,
  BEGIN = 1,
  HEADER = 2,
  DATA1 = 3,
  MESH_DATA = 4,
  DATA2 = 5,
  DATA3 = 6,
  DATA4 = 7,
  DATA5 = 8,
} OBJECT_SECTION_TYPE;

// tree from child objects
uint readObject() {
  struct {
    INT DataSize;
    UINT Type;

    local uint faceCount;
    while (!FEof())
    {
      switch (getType())
      {
        case 0:
          struct {
            INT DataSize;
            UINT Type; //  
          
          } EMPTY;
          break;     
        case 1:
          if (getSize() != 52) return 0;
          INT DataSize;
          UINT Type; //
          if (DataSize == 52)
            struct {
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
     
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT X;
                FLOAT Y;
                FLOAT Z;
    
                FLOAT PosX;
                FLOAT PosY;
                FLOAT PosZ; 
              } MATRIX;
        

          break;
        case 2: 
          struct {
            INT DataSize;
            UINT Type; //
   
            INT16 Index <name="Object index">;
            INT16 ChildCount <name="Number of child objects">;
            INT16 Type0;
            INT16 Unknown;

            if (DataSize > 12)
              UCHAR ObjectName[DataSize - 12]; 

          } OBJECT_HEADER;
          break;
        case 3:
            struct {
              INT DataSize;
              UINT Type; //
              CHAR Str[DataSize - 4]; 
            } EA;
          break;
        case 4:
          struct {

            INT DataSize;
            UINT Type; 

            if (exists(parentof(this).UE))
            {  
              UINT16 Count2;

              struct {
                UINT16 Index;       
                FLOAT R[12];
              } I[Count2];

              UINT Count3;

              struct {
                FLOAT T[Count2]; 
              } S[Count3];
            }
            else
            {
              INT DataSize1;
              UINT Type; 

              if (Type == 3)
              {
                FLOAT TY[5];
                UINT16 KK;
                FLOAT TY2[3]; 
                // kjhkljh();
              }
              else
              {

              UINT16 VertexCount;

              VECTOR_3F VertexCoordinates[VertexCount];

              UINT16 FaceCount;
              if (Type == 2) 
              {
               UINT16 FaceCount;
               UINT16 Un;               
              }
          
              faceCount = FaceCount;

              struct {
                if (Type == 1)
                {
                  UINT16 Index1;
                  UINT16 Index2;
                  UINT16 Index3;
                  UINT16 Un;
                  UINT16 Un;
                  UINT16 Un;  
               } else if (Type == 2)
               {
                  UINT16 Index1;
                  UINT16 Un;
                  UINT16 Index2;
                  UINT16 Un;
                  UINT16 Index3;
                  UINT16 Un;

                  UINT16 Un;  
                  UINT16 Un;
                  UINT16 Un;
               }
              } Facent[FaceCount];  

              if (Type == 1)
              {
                UBYTE Count8;
                struct {
                  UINT16 Count0;
                  UINT16 Count;

                  VECTOR_2F TexCoordinates[Count0];     
                  VECTOR_3UI Indexes[FaceCount];   
                
                } YU[Count8];

                if (!Count8) 
                {   
                  UINT A;
                  UBYTE R[A];
                }
              } else 
              {
                BYTE Count00;
                struct {
                  UINT Count3;
           
                  BYTE Count001;
                  BYTE Count002;
                  struct {
                    FLOAT XYZ[Count001];                
                  } TY[Count3];
              
                  struct {
                    UINT Indexes[3];                
                  } TY2[FaceCount];  
                             
                } wqr[Count00] <optimize=false>;  
 
                UINT Count; 
                BYTE R[Count];
              //dfhdfh();         
              }
              }
            }
          } MESH_DATA; 

                         
          break;
        case 5:
          struct {
            INT DataSize;
            UINT Type;
            BYTE DAta[DataSize - 4]; 
          } UN;
          break;
        case 6:
          if (faceCount == 0)
          {
              UINT DataSize;           
              UINT Type;  
              BYTE Data[DataSize - 4];  
          }       
          else
            struct {
              UINT DataSize;           
              UINT Type; 
              UBYTE Indexes1[faceCount]; 
            } UE;
          break;
        case 7:
          if (OBJECT_HEADER.ChildCount > 0) 
          {
            struct {
              INT DataSize;
              UINT Type; // 7

              local uint i; 
              for (i = 0; i < OBJECT_HEADER.ChildCount; i++)
              struct {
                readObject();
              } ONE_HELL_OF_AN_OBJECT;  
            } CHILD_OBJECTS;
          }
          break;
      };
    };

  } OBJECT;
  
  return 0;
};

while (!FEof())
{ 
  FSkip(4);
  n = ReadInt(FTell());
  if (n == 0) break;
  FSkip(-4);

  if (n == 4) 
    struct {
      UINT DataSize;
      UINT Type;
      UINT16 Count;
      typedef struct {
          BYTE Length;
          UCHAR Name[Length];
      } STATE_NAME <name=GetStateName>;
      typedef struct (uint arraysize) {
        STATE_NAME Array[arraysize] <optimize=false>;
      } STATE_NAMES;
      STATE_NAMES FileNames(Count) <name="State Names">;     

      UINT DataSize;
      UINT Type;
      struct {  
        UINT16 Index;
        UINT Pos;
      } A[Count];
    } STATE_LIST <name="States">;

  if (n == 3) 
    struct {
      UINT DataSize;
      UINT Type;
      UINT16 TextureCount;
      typedef struct {
          BYTE Length;
          UCHAR FileName[Length];
      } FILE_NAME <optimize=false, name=GetTexName>;
      typedef struct (uint arraysize) {
        FILE_NAME Array[arraysize];
      } FILE_NAME_ARRAY <optimize=false>;
      FILE_NAME_ARRAY FileNames(TextureCount) <name="Texture List">;     
    } TEXTURE <name="Textures">;

  if (n == 2) 
    MATERIAL Material;

  if (n == 1) {
    struct {
      readObject();
    } GEOMETRY;
    break;
  };
    
}

//string GetObjName(OBJECT &obj)
//{
//  return "Object: " + obj.ObjectName;
//}

string GetStateName(STATE_NAME &st)
{
  return "State: " + st.Name;
}


string GetTexName(FILE_NAME &fn)
{
  return "Texture: " + fn.FileName;
}

string GetMatName(MATERIAL &mt)
{
  if (exists(mt.MaterialName))
    return "Material: " + mt.MaterialName;
  else
    return "Material";    
}